syntax = "proto3";

package tinkoff.public.invest.api.contract.v1;

option go_package = "Tinkoff/investAPI";
option java_package = "ru.tinkoff.piapi.contract.v1";
option java_multiple_files = true;
option csharp_namespace = "Tinkoff.InvestAPI.V1";
option objc_class_prefix = "TIAPI";
option php_namespace = "Tinkoff\\Invest\\V1";

import "google/protobuf/timestamp.proto";
import "tinkoff/invest/grpc/common.proto";

service MarketDataService { //Сервис получения биржевой информации:</br> **1**. свечи;</br> **2**. стаканы;</br> **3**. торговые статусы;</br> **4**. лента сделок.
  rpc GetCandles(GetCandlesRequest) returns (GetCandlesResponse); //Метод запроса исторических свечей по инструменту.
  rpc GetLastPrices(GetLastPricesRequest) returns (GetLastPricesResponse); //Метод запроса последних цен по инструментам.
  rpc GetOrderBook(GetOrderBookRequest) returns (GetOrderBookResponse); //Метод получения стакана по инструменту.
  rpc GetTradingStatus(GetTradingStatusRequest) returns (GetTradingStatusResponse); //Метод запроса статуса торгов по инструментам.
}

service MarketDataStreamService {
  rpc MarketDataStream(stream MarketDataRequest) returns (stream MarketDataResponse); //Двусторонний стрим предоставления биржевой информации.
}

//Запрос подписки или отписки на определённые биржевые данные.
message MarketDataRequest {
  oneof payload {
    SubscribeCandlesRequest subscribe_candles_request = 1; //Запрос подписки на свечи.
    SubscribeOrderBookRequest subscribe_order_book_request = 2; //Запрос подписки на стаканы.
    SubscribeTradesRequest subscribe_trades_request = 3; //Запрос подписки на ленту обезличенных сделок.
    SubscribeInfoRequest subscribe_info_request = 4; //Запрос подписки на торговые статусы инструментов.
  }
}

//Пакет биржевой информации по подписке.
message MarketDataResponse {
  oneof payload {
    SubscribeCandlesResponse subscribe_candles_response = 1; //Результат подписки на свечи.
    SubscribeOrderBookResponse subscribe_order_book_response = 2; //Результат подписки на стаканы.
    SubscribeTradesResponse subscribe_trades_response = 3; //Результат подписки на поток обезличенных сделок.
    SubscribeInfoResponse subscribe_info_response = 4; //Результат подписки на торговые статусы инструментов.
    Candle candle = 5; //Свеча.
    Trade trade = 6; //Сделки.
    OrderBook orderbook = 7; //Стакан.
    TradingStatus trading_status = 8; //Торговый статус.
  }
}

// subscribeCandles | Изменения статуса подписки на свечи.
message SubscribeCandlesRequest {
  SubscriptionAction subscription_action = 1; //Изменение статуса подписки.
  repeated CandleInstrument instruments = 2; //Массив инструментов для подписки на свечи.
}

enum SubscriptionAction {
  SUBSCRIPTION_ACTION_UNSPECIFIED = 0; //Статус подписки не определён.
  SUBSCRIPTION_ACTION_SUBSCRIBE = 1; //Подписаться.
  SUBSCRIPTION_ACTION_UNSUBSCRIBE = 2; //Отписаться.
}

enum SubscriptionInterval {
  SUBSCRIPTION_INTERVAL_UNSPECIFIED = 0; //Интервал свечи не определён.
  SUBSCRIPTION_INTERVAL_ONE_MINUTE = 1; //Минутные свечи.
  SUBSCRIPTION_INTERVAL_FIVE_MINUTES = 2; //Пятиминутные свечи.
}

message CandleInstrument {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionInterval interval = 2; //Интервал свечей.
}

message SubscribeCandlesResponse {
  string tracking_id = 1; //Уникальный идентификатор запроса, подробнее: [tracking_id](/investAPI/grpc#tracking-id)
  repeated CandleSubscription candles_subscriptions = 2; //Массив статусов подписки на свечи.
}

message CandleSubscription {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionInterval interval = 2; //Интервал свечей.
  SubscriptionStatus subscription_status = 3; //Статус подписки.
}

enum SubscriptionStatus {
  SUBSCRIPTION_STATUS_UNSPECIFIED = 0; //Статус подписки не определён.
  SUBSCRIPTION_STATUS_SUCCESS = 1; //Успешно.
  SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND = 2; //Инструмент не найден.
  SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID = 3; //Некорректный статус подписки, список возможных значений: [SubscriptionAction](/investAPI/marketdata#subscriptionaction)
  SUBSCRIPTION_STATUS_DEPTH_IS_INVALID = 4; //Некорректная глубина стакана, требуется указать целое число от 1 до 50.
  SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID = 5; //Некорректный интервал свечей, список возможных значений: [SubscriptionInterval](/investAPI/marketdata#subscriptioninterval)
  SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED = 6; //Превышен лимит подписок в рамках стрима, подробнее: [Лимитная политика](/investAPI/limits/)
  SUBSCRIPTION_STATUS_INTERNAL_ERROR = 7; //Внутренняя ошибка сервиса.
}

// subscribeOrderbook | Изменение статуса подписки на стаканы.
message SubscribeOrderBookRequest {
  SubscriptionAction subscription_action = 1; //Изменение статуса подписки.
  repeated OrderBookInstrument instruments = 2; //Массив инструментов для подписки на стаканы.
}

message OrderBookInstrument {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
}

message SubscribeOrderBookResponse {
  string tracking_id = 1; //Уникальный идентификатор запроса, подробнее: [tracking_id](/investAPI/grpc#tracking-id)
  repeated OrderBookSubscription order_book_subscriptions = 2; //Массив статусов подписки на стаканы.
}

message OrderBookSubscription {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
  SubscriptionStatus subscription_status = 3; //Статус подписки.
}

// subscribeTrades | Изменение статуса подписки на поток обезличенных сделок.
message SubscribeTradesRequest {
  SubscriptionAction subscription_action = 1; //Изменение статуса подписки.
  repeated TradeInstrument instruments = 2; //Массив инструментов для подписки на поток обезличенных сделок.
}

message TradeInstrument {
  string figi = 1; //Figi-идентификатор инструмента.
}

message SubscribeTradesResponse {
  string tracking_id = 1; //Уникальный идентификатор запроса, подробнее: [tracking_id](/investAPI/grpc#tracking-id)
  repeated TradeSubscription trade_subscriptions = 2; //Массив статусов подписки на поток сделок.
}

message TradeSubscription {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionStatus subscription_status = 2; //Статус подписки.
}

// subscribeInfo | Изменение статуса подписки на торговый статус инструмента.
message SubscribeInfoRequest {
  SubscriptionAction subscription_action = 1; //Изменение статуса подписки.
  repeated InfoInstrument instruments = 2; //Массив инструментов для подписки на торговый статус.
}

message InfoInstrument {
  string figi = 1; //Figi-идентификатор инструмента.
}

message SubscribeInfoResponse {
  string tracking_id = 1; //Уникальный идентификатор запроса, подробнее: [tracking_id](/investAPI/grpc#tracking-id)
  repeated InfoSubscription info_subscriptions = 2; //Массив статусов подписки на торговый статус.
}

message InfoSubscription {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionStatus subscription_status = 2; //Статус подписки.
}

// Выходные параметры. Пакет Candles.
message Candle {
  string figi = 1; //Figi-идентификатор инструмента.
  SubscriptionInterval interval = 2; //Интервал свечи.
  Quotation open = 3; //Цена открытия за 1 лот.
  Quotation high = 4; //Максимальная цена за 1 лот.
  Quotation low = 5; //Минимальная цена за 1 лот.
  Quotation close = 6; //Цена закрытия за 1 лот.
  int64 value = 7; //Объём сделок в лотах.
  google.protobuf.Timestamp time = 8; //Время свечи в часовом поясе UTC.
}

message OrderBook {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
  bool is_consistent = 3; //Флаг консистентности стакана. **false** значит не все заявки попали в стакан по причинам сетевых задержек или нарушения порядка доставки.
  repeated Order bids = 4; //Массив предложений.
  repeated Order asks = 5; //Массив спроса.
  google.protobuf.Timestamp time = 6; //Время стакана в часовом поясе UTC.
}

message Order {
  Quotation price = 1; //Цена за 1 лот.
  int64 quantity = 2; //Количество в лотах.
}

message Trade {
  string figi = 1; //Figi-идентификатор инструмента.
  TradeDirection direction = 2; //Направление сделки.
  Quotation price = 3; //Цена за 1 лот.
  int64 quantity = 4; //Количество лотов.
  google.protobuf.Timestamp timestamp = 5; //Время сделки в часовом поясе UTC по времени биржи.
}

enum TradeDirection {
  TRADE_DIRECTION_UNSPECIFIED = 0; //Направление сделки не определено.
  TRADE_DIRECTION_BUY = 1; //Покупка.
  TRADE_DIRECTION_SELL = 2; //Продажа.
}

message TradingStatus {
  string figi = 1; //Figi-идентификатор инструмента.
  SecurityTradingStatus trading_status = 2; //Статус торговли инструментом.
}

message GetCandlesRequest {
  string figi = 1; //Figi-идентификатор инструмента
  google.protobuf.Timestamp from = 2; //Начало запрашиваемого периода в часовом поясе UTC.
  google.protobuf.Timestamp to = 3; //Окончание запрашиваемого периода в часовом поясе UTC.
  CandleInterval interval = 4; //Интервал запрошенных свечей.
}

enum CandleInterval {
  CANDLE_INTERVAL_UNSPECIFIED = 0; //Интервал не определён.
  CANDLE_INTERVAL_1_MIN = 1; //1 минута.
  CANDLE_INTERVAL_5_MIN = 2; //5 минут.
  CANDLE_INTERVAL_15_MIN = 3; //15 минут.
  CANDLE_INTERVAL_HOUR = 4; //1 час.
  CANDLE_INTERVAL_DAY = 5; //1 день.
}

message GetCandlesResponse {
  repeated HistoricCandle candles = 1; //Массив свечей.
}

message HistoricCandle {
  Quotation open = 1; //Цена открытия за 1 лот.
  Quotation high = 2; //Максимальная цена за 1 лот.
  Quotation low = 3; //Минимальная цена за 1 лот.
  Quotation close = 4; //Цена закрытия за 1 лот.
  int64 volume = 5; //Объём торгов в лотах.
  google.protobuf.Timestamp time = 6; //Время свечи в часовом поясе UTC.
  bool is_complete = 7; //Признак завершённости свечи. **false** значит, свеча за текущие интервал ещё сформирована не полностью.
}

message GetLastPricesRequest {
  repeated string figi = 1; //Массив figi-идентификаторов инструментов.
}

message GetLastPricesResponse {
  repeated LastPrice last_prices = 1; //Массив последних цен.
}

message LastPrice {
  string figi = 1; //Идентификатор инструмента.
  Quotation price = 2; //Последняя цена за 1 лот.
  google.protobuf.Timestamp time = 3; //Время получения последней цены в часовом поясе UTC по времени биржи.
}

message GetOrderBookRequest {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
}

message GetOrderBookResponse {
  string figi = 1; //Figi-идентификатор инструмента.
  int32 depth = 2; //Глубина стакана.
  repeated Order bids = 3; //Множество пар значений на покупку.
  repeated Order asks = 4; //Множество пар значений на продажу.
  Quotation last_price = 5; //Цена последней сделки.
  Quotation close_price = 6; //Цена закрытия.
}

message GetTradingStatusRequest {
  string figi = 1; //Идентификатор инструмента.
}

message GetTradingStatusResponse {
  string figi = 1; //Figi-идентификатор инструмента.
  SecurityTradingStatus trading_status = 2; //Статус торговли инструментом.
}
