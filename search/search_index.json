{"config":{"indexing":"full","lang":["ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tinkoff Invest \u0414\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0442\u043e\u0440\u0433\u043e\u0432\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b pip install tinkoff-investments \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u2611 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 GRPC \u043a\u043b\u0438\u0435\u043d\u0442 \u2611 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u2611 \u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \"\u043e\u0442\" \u0438 \"\u0434\u043e\" \u2611 \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u2611 \u0422\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u041a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 from tinkoff.invest import Client TOKEN = 'token' with Client ( TOKEN ) as client : print ( client . users . get_accounts ()) \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c target \u0412 Tinkoff Invest API \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u043a\u043e\u043d\u0442\u0443\u0440\u0430 - \"\u0431\u043e\u0435\u0432\u043e\u0439\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0440\u0434\u0435\u0440\u043e\u0432 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0438 \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API \u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0433\u0438\u043f\u043e\u0442\u0435\u0437, \u0437\u0430\u044f\u0432\u043a\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u0438\u0440\u0436\u0443, \u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0435. \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043d\u0442\u0443\u0440\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 target, INVEST_GRPC_API - \"\u0431\u043e\u0435\u0432\u043e\u0439\", INVEST_GRPC_API_SANDBOX - \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\" from tinkoff.invest import Client from tinkoff.invest.constants import INVEST_GRPC_API TOKEN = 'token' with Client ( TOKEN , target = INVEST_GRPC_API ) as client : print ( client . users . get_accounts ()) :warning: \u041d\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 examples . Contribution \u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. CONTRIBUTING License \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f The Apache License .","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#tinkoff-invest","text":"\u0414\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0442\u043e\u0440\u0433\u043e\u0432\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","title":"Tinkoff Invest"},{"location":"#_1","text":"pip install tinkoff-investments","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#_2","text":"\u2611 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 GRPC \u043a\u043b\u0438\u0435\u043d\u0442 \u2611 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u2611 \u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \"\u043e\u0442\" \u0438 \"\u0434\u043e\" \u2611 \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u2611 \u0422\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"#_3","text":"","title":"\u041a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f"},{"location":"#_4","text":"from tinkoff.invest import Client TOKEN = 'token' with Client ( TOKEN ) as client : print ( client . users . get_accounts ())","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432"},{"location":"#target","text":"\u0412 Tinkoff Invest API \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u043a\u043e\u043d\u0442\u0443\u0440\u0430 - \"\u0431\u043e\u0435\u0432\u043e\u0439\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0440\u0434\u0435\u0440\u043e\u0432 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0438 \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API \u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0433\u0438\u043f\u043e\u0442\u0435\u0437, \u0437\u0430\u044f\u0432\u043a\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u0438\u0440\u0436\u0443, \u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0435. \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043d\u0442\u0443\u0440\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 target, INVEST_GRPC_API - \"\u0431\u043e\u0435\u0432\u043e\u0439\", INVEST_GRPC_API_SANDBOX - \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\" from tinkoff.invest import Client from tinkoff.invest.constants import INVEST_GRPC_API TOKEN = 'token' with Client ( TOKEN , target = INVEST_GRPC_API ) as client : print ( client . users . get_accounts ()) :warning: \u041d\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 examples .","title":"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c target"},{"location":"#contribution","text":"\u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. CONTRIBUTING","title":"Contribution"},{"location":"#license","text":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f The Apache License .","title":"License"},{"location":"CHANGELOG/","text":"Changelog You can see the commits","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439"},{"location":"CHANGELOG/#changelog","text":"You can see the commits","title":"Changelog"},{"location":"CONTRIBUTING/","text":"Contributing \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Tinkoff Invest! \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 fork \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0441\u0432\u043e\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 git clone https://github.com/username/invest-python.git > \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 username \u0432\u043c\u0435\u0441\u0442\u043e username \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 git checkout -b branch_name \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 (\u0441\u043c. \u043d\u0438\u0436\u0435) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u0432\u043e\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0424\u043e\u0440\u043c\u0430\u0442 \u043e\u043f\u0438\u0441\u0430\u043d \u043d\u0438\u0436\u0435 git add . git commit -m \"feat: add new feature\" \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 github git push \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Pull Request \u0432 \u044d\u0442\u043e\u0442 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 Commit Message Format \u041c\u044b \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0439 Conventional Commits \u0434\u043b\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432. A specification for adding human and machine readable meaning to commit messages. Body \u0438 Footer \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e. Commit Message Header <type>(<scope>): <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end. \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Commit Scope: grpc, async, mypy, schemas, sandbox \u2502 \u2514\u2500\u2af8 Commit Type: feat|fix|build|ci|docs|perf|refactor|test|chore Type feat Features A new feature fix Bug Fixes A bug fix docs Documentation Documentation only changes style Styles Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor Code Refactoring A code change that neither fixes a bug nor adds a feature perf Performance Improvements A code change that improves performance test Tests Adding missing tests or correcting existing tests build Builds Changes that affect the build system or external dependencies (example scopes: mypy, pip, pytest) ci Continuous Integrations Changes to our CI configuration files and scripts (example scopes: Github Actions) chore Chores Other changes that don't modify src or test files revert Reverts Reverts a previous commit \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c poetry . \u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0441\u043a \u0440\u0430\u043d\u043d\u0435\u0440 make. \u0412\u0441\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 Makefile. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0445 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 make install-poetry make install \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, poetry \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 ~/.cache/pypoetry/virtualenvs/ . \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443: poetry config virtualenvs.in-project true \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0430\u043c\u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: python -m venv .venv poetry \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e. \u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432 make test \u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 make lint \u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0432\u0442\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f make format \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 make download-protos \u041f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0432\u0435\u0442\u043a\u0438 main . \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 make gen-grpc \u0417\u0430\u0442\u0435\u043c, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0438: - tinkoff/invest/__init__.py - tinkoff/invest/async_services.py - tinkoff/invest/schemas.py - tinkoff/invest/services.py \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u041c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. make gen-client Release \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0420\u0435\u043b\u0438\u0437 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 main \u0432\u0435\u0442\u043a\u0443.","title":"\u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435"},{"location":"CONTRIBUTING/#contributing","text":"\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Tinkoff Invest!","title":"Contributing"},{"location":"CONTRIBUTING/#_1","text":"\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 fork \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0441\u0432\u043e\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 git clone https://github.com/username/invest-python.git > \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 username \u0432\u043c\u0435\u0441\u0442\u043e username \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 git checkout -b branch_name \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 (\u0441\u043c. \u043d\u0438\u0436\u0435) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u0432\u043e\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0424\u043e\u0440\u043c\u0430\u0442 \u043e\u043f\u0438\u0441\u0430\u043d \u043d\u0438\u0436\u0435 git add . git commit -m \"feat: add new feature\" \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 github git push \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Pull Request \u0432 \u044d\u0442\u043e\u0442 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442"},{"location":"CONTRIBUTING/#commit-message-format","text":"\u041c\u044b \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0439 Conventional Commits \u0434\u043b\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432. A specification for adding human and machine readable meaning to commit messages. Body \u0438 Footer \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e.","title":"Commit Message Format"},{"location":"CONTRIBUTING/#commit-message-header","text":"<type>(<scope>): <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end. \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Commit Scope: grpc, async, mypy, schemas, sandbox \u2502 \u2514\u2500\u2af8 Commit Type: feat|fix|build|ci|docs|perf|refactor|test|chore","title":"Commit Message Header"},{"location":"CONTRIBUTING/#type","text":"feat Features A new feature fix Bug Fixes A bug fix docs Documentation Documentation only changes style Styles Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor Code Refactoring A code change that neither fixes a bug nor adds a feature perf Performance Improvements A code change that improves performance test Tests Adding missing tests or correcting existing tests build Builds Changes that affect the build system or external dependencies (example scopes: mypy, pip, pytest) ci Continuous Integrations Changes to our CI configuration files and scripts (example scopes: Github Actions) chore Chores Other changes that don't modify src or test files revert Reverts Reverts a previous commit","title":"Type"},{"location":"CONTRIBUTING/#_2","text":"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c poetry . \u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0441\u043a \u0440\u0430\u043d\u043d\u0435\u0440 make. \u0412\u0441\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 Makefile. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0445 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e.","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435"},{"location":"CONTRIBUTING/#_3","text":"make install-poetry make install","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439"},{"location":"CONTRIBUTING/#_4","text":"\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, poetry \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 ~/.cache/pypoetry/virtualenvs/ . \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443: poetry config virtualenvs.in-project true \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0430\u043c\u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: python -m venv .venv poetry \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e.","title":"\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435"},{"location":"CONTRIBUTING/#_5","text":"make test","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432"},{"location":"CONTRIBUTING/#_6","text":"make lint","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432"},{"location":"CONTRIBUTING/#_7","text":"make format","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0432\u0442\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"CONTRIBUTING/#proto","text":"make download-protos \u041f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0432\u0435\u0442\u043a\u0438 main .","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"CONTRIBUTING/#_8","text":"make gen-grpc \u0417\u0430\u0442\u0435\u043c, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0438: - tinkoff/invest/__init__.py - tinkoff/invest/async_services.py - tinkoff/invest/schemas.py - tinkoff/invest/services.py","title":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"CONTRIBUTING/#proto_1","text":"\u041c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. make gen-client","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"CONTRIBUTING/#release","text":"\u0420\u0435\u043b\u0438\u0437 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 main \u0432\u0435\u0442\u043a\u0443.","title":"Release \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438"},{"location":"examples/","text":"\u0411\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0437\u0434\u0435\u0441\u044c . \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434 examples/all_candles.py import os from datetime import timedelta from tinkoff.invest import CandleInterval , Client from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) return 0 if __name__ == \"__main__\" : main () \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434 examples/async_all_candles.py import asyncio import os from datetime import timedelta from tinkoff.invest import AsyncClient , CandleInterval from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : async for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ()) \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f examples/async_client.py import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ()) \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/async_retrying_client.py import asyncio import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.aio.client import AsyncRetryingClient from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) async def main (): async with AsyncRetryingClient ( TOKEN , settings = retry_settings ) as client : async for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ()) \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043f\u043e \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u043c \u0441\u0432\u0435\u0447\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c examples/async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : await asyncio . sleep ( 1 ) async with AsyncClient ( TOKEN ) as client : async for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : asyncio . run ( main ()) \u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0439 examples/cancel_orders.py import logging import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] logger = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) client . cancel_all_orders ( account_id = account . id ) logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 examples/client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ()) if __name__ == \"__main__\" : main () \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u043f\u043e \u0438\u043d\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0443 examples/download_all_candles.py import logging import os from datetime import timedelta from pathlib import Path from tinkoff.invest import CandleInterval , Client from tinkoff.invest.caching.market_data_cache.cache_settings import ( MarketDataCacheSettings , ) from tinkoff.invest.services import MarketDataCache from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) def main (): with Client ( TOKEN ) as client : settings = MarketDataCacheSettings ( base_cache_dir = Path ( \"market_data_cache\" )) market_data_cache = MarketDataCache ( settings = settings , services = client ) for candle in market_data_cache . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 3 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle . time ) return 0 if __name__ == \"__main__\" : main () \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/easy_async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.async_services import AsyncMarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : market_data_stream : AsyncMarketDataStreamManager = ( client . create_market_data_stream () ) market_data_stream . candles . waiting_close () . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) async for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : asyncio . run ( main ()) \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/easy_stream_client.py import os from tinkoff.invest import ( CandleInstrument , Client , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.services import MarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : market_data_stream : MarketDataStreamManager = client . create_market_data_stream () market_data_stream . candles . waiting_close () . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : main () \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0438\u0445 \u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 examples/get_operations_by_cursor.py import os from tinkoff.invest import Client , GetOperationsByCursorRequest token = os . environ [ \"INVEST_TOKEN\" ] with Client ( token ) as client : accounts = client . users . get_accounts () account_id = accounts . accounts [ 0 ] . id def get_request ( cursor = \"\" ): return GetOperationsByCursorRequest ( account_id = account_id , instrument_id = \"BBG004730N88\" , cursor = cursor , limit = 1 , ) operations = client . operations . get_operations_by_cursor ( get_request ()) print ( operations ) while operations . has_next : request = get_request ( cursor = operations . next_cursor ) operations = client . operations . get_operations_by_cursor ( request ) print ( operations ) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 examples/instrument_cache.py import logging import os from pprint import pprint from tinkoff.invest import Client , InstrumentIdType from tinkoff.invest.caching.instruments_cache.instruments_cache import InstrumentsCache from tinkoff.invest.caching.instruments_cache.settings import InstrumentsCacheSettings TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : inst = client . instruments . etfs () . instruments [ - 1 ] pprint ( inst ) from_server = client . instruments . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_server ) settings = InstrumentsCacheSettings () instruments_cache = InstrumentsCache ( settings = settings , instruments_service = client . instruments ) from_cache = instruments_cache . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_cache ) if str ( from_server ) != str ( from_cache ): raise Exception ( \"cache miss\" ) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 query examples/instruments.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : r = client . instruments . find_instrument ( query = \"BBG001M2SC01\" ) for i in r . instruments : print ( i ) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a examples/logger.py import logging import os from tinkoff.invest import Client , RequestError TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) def main (): with Client ( TOKEN ) as client : _ = client . users . get_accounts () . accounts try : client . users . get_margin_attributes ( account_id = \"123\" ) except RequestError as err : tracking_id = err . metadata . tracking_id if err . metadata else \"\" logger . error ( \"Error tracking_id= %s code= %s \" , tracking_id , str ( err . code )) if __name__ == \"__main__\" : main () \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0440\u0442\u0444\u043e\u043b\u0438\u043e \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 examples/porfolio_stream_client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : accounts = client . users . get_accounts () for portfolio in client . operations_stream . portfolio_stream ( accounts = [ acc . id for acc in accounts . accounts ] ): print ( portfolio ) if __name__ == \"__main__\" : main () \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 examples/positions_stream.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () accounts = [ account . id for account in response . accounts ] for response in client . operations_stream . positions_stream ( accounts = accounts ): print ( response ) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/retrying_client.py import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.retrying.sync.client import RetryingClient from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) with RetryingClient ( TOKEN , settings = retry_settings ) as client : for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle ) \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0435 examples/sandbox_client.py import os from tinkoff.invest.sandbox.client import SandboxClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with SandboxClient ( TOKEN ) as client : print ( client . users . get_info ()) if __name__ == \"__main__\" : main () \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0438 \u0438\u0445 \u0432\u044b\u0432\u043e\u0434 examples/stream_client.py import os import time from tinkoff.invest import ( CandleInstrument , Client , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( waiting_close = True , subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : time . sleep ( 1 ) with Client ( TOKEN ) as client : for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : main () \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u044d\u0439\u043a-\u043f\u0440\u043e\u0444\u0438\u0442 \u0441\u0442\u043e\u043f \u043e\u0440\u0434\u0435\u0440\u0430 examples/wiseplat_create_take_profit_stop_order.py \"\"\"Example - How to create takeprofit buy order.\"\"\" import logging import os from decimal import Decimal from tinkoff.invest import ( Client , InstrumentIdType , StopOrderDirection , StopOrderExpirationType , StopOrderType , ) from tinkoff.invest.exceptions import InvestError from tinkoff.invest.utils import decimal_to_quotation , quotation_to_decimal TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) def main (): \"\"\"Example - How to create takeprofit buy order.\"\"\" with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) figi = \"BBG004730ZJ9\" # BBG004730ZJ9 - VTBR / BBG004730N88 - SBER # getting the last price for instrument last_price = ( client . market_data . get_last_prices ( figi = [ figi ]) . last_prices [ 0 ] . price ) last_price = quotation_to_decimal ( last_price ) print ( f \"figi, last price = { last_price } \" ) # setting the percentage by which the takeprofit stop order # should be set below the last price percent_down = 5 # calculation of the price for takeprofit stop order calculated_price = last_price - last_price * Decimal ( percent_down / 100 ) print ( f \"calculated_price = { calculated_price } \" ) # getting the min price increment and the number of digits after point min_price_increment = client . instruments . get_instrument_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_FIGI , id = figi ) . instrument . min_price_increment number_digits_after_point = 9 - len ( str ( min_price_increment . nano )) + 1 min_price_increment = quotation_to_decimal ( min_price_increment ) print ( f \"min_price_increment = { min_price_increment } , \" f \"number_digits_after_point= { number_digits_after_point } \" ) # calculation of the price for instrument which is # divisible to min price increment calculated_price = ( round ( calculated_price / min_price_increment ) * min_price_increment ) print ( f \"let's send stop order at price = \" f \" { calculated_price : . { number_digits_after_point } f } divisible to \" f \"min price increment { min_price_increment } \" ) # creating takeprofit buy order stop_order_type = StopOrderType . STOP_ORDER_TYPE_TAKE_PROFIT direction = StopOrderDirection . STOP_ORDER_DIRECTION_BUY exp_type = StopOrderExpirationType . STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL try : response = client . stop_orders . post_stop_order ( figi = figi , quantity = 1 , price = decimal_to_quotation ( Decimal ( calculated_price )), stop_price = decimal_to_quotation ( Decimal ( calculated_price )), direction = direction , account_id = account_id , expiration_type = exp_type , stop_order_type = stop_order_type , expire_date = None , ) print ( response ) print ( \"stop_order_id=\" , response . stop_order_id ) except InvestError as error : logger . error ( \"Posting trade takeprofit order failed. Exception: %s \" , error ) if __name__ == \"__main__\" : main () \u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043f \u043e\u0440\u0434\u0435\u0440\u043e\u0432 examples/wiseplat_cancel_all_stop_orders.py \"\"\"Example - How to cancel all stop orders.\"\"\" import logging import os from tinkoff.invest import Client from tinkoff.invest.exceptions import InvestError TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) def main (): \"\"\"Example - How to cancel all stop orders.\"\"\" with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id try : stop_orders_response = client . stop_orders . get_stop_orders ( account_id = account_id ) logger . info ( \"Stop Orders: %s \" , stop_orders_response ) for stop_order in stop_orders_response . stop_orders : client . stop_orders . cancel_stop_order ( account_id = account_id , stop_order_id = stop_order . stop_order_id ) logger . info ( \"Stop Order: %s was canceled.\" , stop_order . stop_order_id ) logger . info ( \"Orders: %s \" , client . stop_orders . get_stop_orders ( account_id = account_id ) ) except InvestError as error : logger . error ( \"Failed to cancel all orders. Error: %s \" , error ) if __name__ == \"__main__\" : main () \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 figi \u0434\u043b\u044f \u0442\u0438\u043a\u0435\u0440\u0430 examples/wiseplat_get_figi_for_ticker.py \"\"\"Example - How to get figi by name of ticker.\"\"\" import logging import os from pandas import DataFrame from tinkoff.invest import Client , SecurityTradingStatus from tinkoff.invest.services import InstrumentsService from tinkoff.invest.utils import quotation_to_decimal TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) def main (): \"\"\"Example - How to get figi by name of ticker.\"\"\" ticker = \"VTBR\" # \"BRH3\" \"SBER\" \"VTBR\" with Client ( TOKEN ) as client : instruments : InstrumentsService = client . instruments tickers = [] for method in [ \"shares\" , \"bonds\" , \"etfs\" , \"currencies\" , \"futures\" ]: for item in getattr ( instruments , method )() . instruments : tickers . append ( { \"name\" : item . name , \"ticker\" : item . ticker , \"class_code\" : item . class_code , \"figi\" : item . figi , \"uid\" : item . uid , \"type\" : method , \"min_price_increment\" : quotation_to_decimal ( item . min_price_increment ), \"scale\" : 9 - len ( str ( item . min_price_increment . nano )) + 1 , \"lot\" : item . lot , \"trading_status\" : str ( SecurityTradingStatus ( item . trading_status ) . name ), \"api_trade_available_flag\" : item . api_trade_available_flag , \"currency\" : item . currency , \"exchange\" : item . exchange , \"buy_available_flag\" : item . buy_available_flag , \"sell_available_flag\" : item . sell_available_flag , \"short_enabled_flag\" : item . short_enabled_flag , \"klong\" : quotation_to_decimal ( item . klong ), \"kshort\" : quotation_to_decimal ( item . kshort ), } ) tickers_df = DataFrame ( tickers ) ticker_df = tickers_df [ tickers_df [ \"ticker\" ] == ticker ] if ticker_df . empty : logger . error ( \"There is no such ticker: %s \" , ticker ) return figi = ticker_df [ \"figi\" ] . iloc [ 0 ] print ( f \" \\n Ticker { ticker } have figi= { figi } \\n \" ) print ( f \"Additional info for this { ticker } ticker:\" ) print ( ticker_df . iloc [ 0 ]) if __name__ == \"__main__\" : main () \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 / \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0434\u043b\u044f \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u044b. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 / \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u044b. examples/wiseplat_set_get_sandbox_balance.py \"\"\" Example - How to set/get balance for sandbox account. How to get/close all sandbox accounts. How to open new sandbox account. \"\"\" import logging import os from datetime import datetime from decimal import Decimal from tinkoff.invest import MoneyValue from tinkoff.invest.sandbox.client import SandboxClient from tinkoff.invest.utils import decimal_to_quotation , quotation_to_decimal TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) def add_money_sandbox ( client , account_id , money , currency = \"rub\" ): \"\"\"Function to add money to sandbox account.\"\"\" money = decimal_to_quotation ( Decimal ( money )) return client . sandbox . sandbox_pay_in ( account_id = account_id , amount = MoneyValue ( units = money . units , nano = money . nano , currency = currency ), ) def main (): \"\"\"Example - How to set/get balance for sandbox account. How to get/close all sandbox accounts. How to open new sandbox account.\"\"\" with SandboxClient ( TOKEN ) as client : # get all sandbox accounts sandbox_accounts = client . users . get_accounts () print ( sandbox_accounts ) # close all sandbox accounts for sandbox_account in sandbox_accounts . accounts : client . sandbox . close_sandbox_account ( account_id = sandbox_account . id ) # open new sandbox account sandbox_account = client . sandbox . open_sandbox_account () print ( sandbox_account . account_id ) account_id = sandbox_account . account_id # add initial 2 000 000 to sandbox account print ( add_money_sandbox ( client = client , account_id = account_id , money = 2000000 )) logger . info ( \"positions: %s \" , client . operations . get_positions ( account_id = account_id ) ) print ( \"money: \" , float ( quotation_to_decimal ( client . operations . get_positions ( account_id = account_id ) . money [ 0 ] ) ), ) logger . info ( \"orders: %s \" , client . orders . get_orders ( account_id = account_id )) logger . info ( \"positions: %s \" , client . operations . get_positions ( account_id = account_id ) ) logger . info ( \"portfolio: %s \" , client . operations . get_portfolio ( account_id = account_id ) ) logger . info ( \"operations: %s \" , client . operations . get_operations ( account_id = account_id , from_ = datetime ( 2023 , 1 , 1 ), to = datetime ( 2023 , 2 , 5 ), ), ) logger . info ( \"withdraw_limits: %s \" , client . operations . get_withdraw_limits ( account_id = account_id ), ) # add + 2 000 000 to sandbox account, total is 4 000 000 print ( add_money_sandbox ( client = client , account_id = account_id , money = 2000000 )) logger . info ( \"positions: %s \" , client . operations . get_positions ( account_id = account_id ) ) # close new sandbox account sandbox_account = client . sandbox . close_sandbox_account ( account_id = sandbox_account . account_id ) print ( sandbox_account ) if __name__ == \"__main__\" : main () \u041f\u0440\u0438\u043c\u0435\u0440 live \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0434\u043b\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u0438\u043a\u0435\u0440\u043e\u0432. \u0412\u044b\u0432\u043e\u0434 OHLCV \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0439\u0441\u044f \u0441\u0432\u0435\u0447\u0438. examples/wiseplat_live_strategy_print_ohlcv.py \"\"\" This code is an example of applying Trading Strategy for several Tickers. The strategy in this code is for demonstration only purposes - it outputs OHLCV values. Author: Oleg Shpagin, my github: https://github.com/WISEPLAT \"\"\" import asyncio import logging import os from datetime import timedelta from typing import List , Optional from tinkoff.invest import AioRequestError , AsyncClient , CandleInterval , HistoricCandle from tinkoff.invest.async_services import AsyncServices from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) class LogOnlyCandlesStrategy : \"\"\"This class is responsible for a strategy. You can put here your methods for your strategy.\"\"\" def __init__ ( self , figi : str , timeframe : CandleInterval , days_back : int , check_interval : int , client : Optional [ AsyncServices ], ): self . account_id = None self . figi = figi self . timeframe = timeframe self . days_back = days_back self . check_interval = check_interval self . client = client self . candles : List [ HistoricCandle ] = [] async def get_historical_data ( self ): \"\"\" Gets historical data for the instrument. Returns list of candles. Requests all the candles of timeframe from days_back to now. :return: list of HistoricCandle \"\"\" logger . debug ( \"Start getting historical data for %s days back from now. figi= %s \" , self . days_back , self . figi , ) async for candle in self . client . get_all_candles ( figi = self . figi , from_ = now () - timedelta ( days = self . days_back ), to = now (), interval = self . timeframe , ): if candle not in self . candles : if candle . is_complete : self . candles . append ( candle ) logger . debug ( \"Found %s - figi= %s \" , candle , self . figi ) async def ensure_market_open ( self ): \"\"\" Ensure that the market is open. Loop until the instrument is available. :return: when instrument is available for trading \"\"\" trading_status = await self . client . market_data . get_trading_status ( figi = self . figi ) while not ( trading_status . market_order_available_flag and trading_status . api_trade_available_flag ): logger . debug ( \"Waiting for the market to open. figi= %s \" , self . figi ) await asyncio . sleep ( 60 ) trading_status = await self . client . market_data . get_trading_status ( figi = self . figi ) async def main_cycle ( self ): \"\"\"Main cycle for live strategy.\"\"\" while True : try : await self . ensure_market_open () await self . get_historical_data () # put your strategy code here for live # to generate signals for buying or selling tickers logger . debug ( \"- live mode: run some strategy code to buy or sell - figi= %s \" , self . figi , ) except AioRequestError as are : logger . error ( \"Client error %s \" , are ) await asyncio . sleep ( self . check_interval ) async def start ( self ): \"\"\"Strategy starts from this function.\"\"\" if self . account_id is None : try : self . account_id = ( ( await self . client . users . get_accounts ()) . accounts . pop () . id ) except AioRequestError as are : logger . error ( \"Error taking account id. Stopping strategy. %s \" , are ) return await self . main_cycle () async def run_strategy ( portfolio , timeframe , days_back , check_interval ): \"\"\"From this function we are starting strategy for every ticker from portfolio. \"\"\" async with AsyncClient ( token = TOKEN , app_name = \"TinkoffApp\" ) as client : strategy_tasks = [] for instrument in portfolio : strategy = LogOnlyCandlesStrategy ( figi = instrument , timeframe = timeframe , days_back = days_back , check_interval = check_interval , client = client , ) strategy_tasks . append ( asyncio . create_task ( strategy . start ())) await asyncio . gather ( * strategy_tasks ) if __name__ == \"__main__\" : sber_figi = \"BBG004730N88\" vtbr_figi = \"BBG004730ZJ9\" portfolio = { sber_figi , vtbr_figi } timeframe = CandleInterval . CANDLE_INTERVAL_1_MIN days_back = 1 check_interval = 10 # seconds to check interval for new completed candle loop = asyncio . get_event_loop () task = loop . create_task ( run_strategy ( portfolio = portfolio , timeframe = timeframe , days_back = days_back , check_interval = check_interval , ) ) loop . run_until_complete ( task )","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"examples/#_1","text":"examples/all_candles.py import os from datetime import timedelta from tinkoff.invest import CandleInterval , Client from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) return 0 if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434"},{"location":"examples/#_2","text":"examples/async_all_candles.py import asyncio import os from datetime import timedelta from tinkoff.invest import AsyncClient , CandleInterval from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : async for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434"},{"location":"examples/#_3","text":"examples/async_client.py import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"examples/#_4","text":"examples/async_retrying_client.py import asyncio import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.aio.client import AsyncRetryingClient from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) async def main (): async with AsyncRetryingClient ( TOKEN , settings = retry_settings ) as client : async for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_5","text":"examples/async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : await asyncio . sleep ( 1 ) async with AsyncClient ( TOKEN ) as client : async for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043f\u043e \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u043c \u0441\u0432\u0435\u0447\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c"},{"location":"examples/#_6","text":"examples/cancel_orders.py import logging import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] logger = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) client . cancel_all_orders ( account_id = account . id ) logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) if __name__ == \"__main__\" : main ()","title":"\u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0439"},{"location":"examples/#_7","text":"examples/client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ()) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"examples/#_8","text":"examples/download_all_candles.py import logging import os from datetime import timedelta from pathlib import Path from tinkoff.invest import CandleInterval , Client from tinkoff.invest.caching.market_data_cache.cache_settings import ( MarketDataCacheSettings , ) from tinkoff.invest.services import MarketDataCache from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) def main (): with Client ( TOKEN ) as client : settings = MarketDataCacheSettings ( base_cache_dir = Path ( \"market_data_cache\" )) market_data_cache = MarketDataCache ( settings = settings , services = client ) for candle in market_data_cache . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 3 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle . time ) return 0 if __name__ == \"__main__\" : main ()","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u043f\u043e \u0438\u043d\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0443"},{"location":"examples/#_9","text":"examples/easy_async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.async_services import AsyncMarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : market_data_stream : AsyncMarketDataStreamManager = ( client . create_market_data_stream () ) market_data_stream . candles . waiting_close () . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) async for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_10","text":"examples/easy_stream_client.py import os from tinkoff.invest import ( CandleInstrument , Client , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.services import MarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : market_data_stream : MarketDataStreamManager = client . create_market_data_stream () market_data_stream . candles . waiting_close () . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : main ()","title":"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_11","text":"examples/get_operations_by_cursor.py import os from tinkoff.invest import Client , GetOperationsByCursorRequest token = os . environ [ \"INVEST_TOKEN\" ] with Client ( token ) as client : accounts = client . users . get_accounts () account_id = accounts . accounts [ 0 ] . id def get_request ( cursor = \"\" ): return GetOperationsByCursorRequest ( account_id = account_id , instrument_id = \"BBG004730N88\" , cursor = cursor , limit = 1 , ) operations = client . operations . get_operations_by_cursor ( get_request ()) print ( operations ) while operations . has_next : request = get_request ( cursor = operations . next_cursor ) operations = client . operations . get_operations_by_cursor ( request ) print ( operations )","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0438\u0445 \u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434"},{"location":"examples/#_12","text":"examples/instrument_cache.py import logging import os from pprint import pprint from tinkoff.invest import Client , InstrumentIdType from tinkoff.invest.caching.instruments_cache.instruments_cache import InstrumentsCache from tinkoff.invest.caching.instruments_cache.settings import InstrumentsCacheSettings TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : inst = client . instruments . etfs () . instruments [ - 1 ] pprint ( inst ) from_server = client . instruments . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_server ) settings = InstrumentsCacheSettings () instruments_cache = InstrumentsCache ( settings = settings , instruments_service = client . instruments ) from_cache = instruments_cache . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_cache ) if str ( from_server ) != str ( from_cache ): raise Exception ( \"cache miss\" ) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432"},{"location":"examples/#query","text":"examples/instruments.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : r = client . instruments . find_instrument ( query = \"BBG001M2SC01\" ) for i in r . instruments : print ( i ) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 query"},{"location":"examples/#_13","text":"examples/logger.py import logging import os from tinkoff.invest import Client , RequestError TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) def main (): with Client ( TOKEN ) as client : _ = client . users . get_accounts () . accounts try : client . users . get_margin_attributes ( account_id = \"123\" ) except RequestError as err : tracking_id = err . metadata . tracking_id if err . metadata else \"\" logger . error ( \"Error tracking_id= %s code= %s \" , tracking_id , str ( err . code )) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a"},{"location":"examples/#_14","text":"examples/porfolio_stream_client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : accounts = client . users . get_accounts () for portfolio in client . operations_stream . portfolio_stream ( accounts = [ acc . id for acc in accounts . accounts ] ): print ( portfolio ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0440\u0442\u0444\u043e\u043b\u0438\u043e \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"},{"location":"examples/#_15","text":"examples/positions_stream.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () accounts = [ account . id for account in response . accounts ] for response in client . operations_stream . positions_stream ( accounts = accounts ): print ( response ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"},{"location":"examples/#_16","text":"examples/retrying_client.py import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.retrying.sync.client import RetryingClient from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) with RetryingClient ( TOKEN , settings = retry_settings ) as client : for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle )","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_17","text":"examples/sandbox_client.py import os from tinkoff.invest.sandbox.client import SandboxClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with SandboxClient ( TOKEN ) as client : print ( client . users . get_info ()) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0435"},{"location":"examples/#_18","text":"examples/stream_client.py import os import time from tinkoff.invest import ( CandleInstrument , Client , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( waiting_close = True , subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : time . sleep ( 1 ) with Client ( TOKEN ) as client : for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0438 \u0438\u0445 \u0432\u044b\u0432\u043e\u0434"},{"location":"examples/#-","text":"examples/wiseplat_create_take_profit_stop_order.py \"\"\"Example - How to create takeprofit buy order.\"\"\" import logging import os from decimal import Decimal from tinkoff.invest import ( Client , InstrumentIdType , StopOrderDirection , StopOrderExpirationType , StopOrderType , ) from tinkoff.invest.exceptions import InvestError from tinkoff.invest.utils import decimal_to_quotation , quotation_to_decimal TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) def main (): \"\"\"Example - How to create takeprofit buy order.\"\"\" with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) figi = \"BBG004730ZJ9\" # BBG004730ZJ9 - VTBR / BBG004730N88 - SBER # getting the last price for instrument last_price = ( client . market_data . get_last_prices ( figi = [ figi ]) . last_prices [ 0 ] . price ) last_price = quotation_to_decimal ( last_price ) print ( f \"figi, last price = { last_price } \" ) # setting the percentage by which the takeprofit stop order # should be set below the last price percent_down = 5 # calculation of the price for takeprofit stop order calculated_price = last_price - last_price * Decimal ( percent_down / 100 ) print ( f \"calculated_price = { calculated_price } \" ) # getting the min price increment and the number of digits after point min_price_increment = client . instruments . get_instrument_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_FIGI , id = figi ) . instrument . min_price_increment number_digits_after_point = 9 - len ( str ( min_price_increment . nano )) + 1 min_price_increment = quotation_to_decimal ( min_price_increment ) print ( f \"min_price_increment = { min_price_increment } , \" f \"number_digits_after_point= { number_digits_after_point } \" ) # calculation of the price for instrument which is # divisible to min price increment calculated_price = ( round ( calculated_price / min_price_increment ) * min_price_increment ) print ( f \"let's send stop order at price = \" f \" { calculated_price : . { number_digits_after_point } f } divisible to \" f \"min price increment { min_price_increment } \" ) # creating takeprofit buy order stop_order_type = StopOrderType . STOP_ORDER_TYPE_TAKE_PROFIT direction = StopOrderDirection . STOP_ORDER_DIRECTION_BUY exp_type = StopOrderExpirationType . STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL try : response = client . stop_orders . post_stop_order ( figi = figi , quantity = 1 , price = decimal_to_quotation ( Decimal ( calculated_price )), stop_price = decimal_to_quotation ( Decimal ( calculated_price )), direction = direction , account_id = account_id , expiration_type = exp_type , stop_order_type = stop_order_type , expire_date = None , ) print ( response ) print ( \"stop_order_id=\" , response . stop_order_id ) except InvestError as error : logger . error ( \"Posting trade takeprofit order failed. Exception: %s \" , error ) if __name__ == \"__main__\" : main ()","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u044d\u0439\u043a-\u043f\u0440\u043e\u0444\u0438\u0442 \u0441\u0442\u043e\u043f \u043e\u0440\u0434\u0435\u0440\u0430"},{"location":"examples/#_19","text":"examples/wiseplat_cancel_all_stop_orders.py \"\"\"Example - How to cancel all stop orders.\"\"\" import logging import os from tinkoff.invest import Client from tinkoff.invest.exceptions import InvestError TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) def main (): \"\"\"Example - How to cancel all stop orders.\"\"\" with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id try : stop_orders_response = client . stop_orders . get_stop_orders ( account_id = account_id ) logger . info ( \"Stop Orders: %s \" , stop_orders_response ) for stop_order in stop_orders_response . stop_orders : client . stop_orders . cancel_stop_order ( account_id = account_id , stop_order_id = stop_order . stop_order_id ) logger . info ( \"Stop Order: %s was canceled.\" , stop_order . stop_order_id ) logger . info ( \"Orders: %s \" , client . stop_orders . get_stop_orders ( account_id = account_id ) ) except InvestError as error : logger . error ( \"Failed to cancel all orders. Error: %s \" , error ) if __name__ == \"__main__\" : main ()","title":"\u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043f \u043e\u0440\u0434\u0435\u0440\u043e\u0432"},{"location":"examples/#figi","text":"examples/wiseplat_get_figi_for_ticker.py \"\"\"Example - How to get figi by name of ticker.\"\"\" import logging import os from pandas import DataFrame from tinkoff.invest import Client , SecurityTradingStatus from tinkoff.invest.services import InstrumentsService from tinkoff.invest.utils import quotation_to_decimal TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) def main (): \"\"\"Example - How to get figi by name of ticker.\"\"\" ticker = \"VTBR\" # \"BRH3\" \"SBER\" \"VTBR\" with Client ( TOKEN ) as client : instruments : InstrumentsService = client . instruments tickers = [] for method in [ \"shares\" , \"bonds\" , \"etfs\" , \"currencies\" , \"futures\" ]: for item in getattr ( instruments , method )() . instruments : tickers . append ( { \"name\" : item . name , \"ticker\" : item . ticker , \"class_code\" : item . class_code , \"figi\" : item . figi , \"uid\" : item . uid , \"type\" : method , \"min_price_increment\" : quotation_to_decimal ( item . min_price_increment ), \"scale\" : 9 - len ( str ( item . min_price_increment . nano )) + 1 , \"lot\" : item . lot , \"trading_status\" : str ( SecurityTradingStatus ( item . trading_status ) . name ), \"api_trade_available_flag\" : item . api_trade_available_flag , \"currency\" : item . currency , \"exchange\" : item . exchange , \"buy_available_flag\" : item . buy_available_flag , \"sell_available_flag\" : item . sell_available_flag , \"short_enabled_flag\" : item . short_enabled_flag , \"klong\" : quotation_to_decimal ( item . klong ), \"kshort\" : quotation_to_decimal ( item . kshort ), } ) tickers_df = DataFrame ( tickers ) ticker_df = tickers_df [ tickers_df [ \"ticker\" ] == ticker ] if ticker_df . empty : logger . error ( \"There is no such ticker: %s \" , ticker ) return figi = ticker_df [ \"figi\" ] . iloc [ 0 ] print ( f \" \\n Ticker { ticker } have figi= { figi } \\n \" ) print ( f \"Additional info for this { ticker } ticker:\" ) print ( ticker_df . iloc [ 0 ]) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 figi \u0434\u043b\u044f \u0442\u0438\u043a\u0435\u0440\u0430"},{"location":"examples/#_20","text":"examples/wiseplat_set_get_sandbox_balance.py \"\"\" Example - How to set/get balance for sandbox account. How to get/close all sandbox accounts. How to open new sandbox account. \"\"\" import logging import os from datetime import datetime from decimal import Decimal from tinkoff.invest import MoneyValue from tinkoff.invest.sandbox.client import SandboxClient from tinkoff.invest.utils import decimal_to_quotation , quotation_to_decimal TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) def add_money_sandbox ( client , account_id , money , currency = \"rub\" ): \"\"\"Function to add money to sandbox account.\"\"\" money = decimal_to_quotation ( Decimal ( money )) return client . sandbox . sandbox_pay_in ( account_id = account_id , amount = MoneyValue ( units = money . units , nano = money . nano , currency = currency ), ) def main (): \"\"\"Example - How to set/get balance for sandbox account. How to get/close all sandbox accounts. How to open new sandbox account.\"\"\" with SandboxClient ( TOKEN ) as client : # get all sandbox accounts sandbox_accounts = client . users . get_accounts () print ( sandbox_accounts ) # close all sandbox accounts for sandbox_account in sandbox_accounts . accounts : client . sandbox . close_sandbox_account ( account_id = sandbox_account . id ) # open new sandbox account sandbox_account = client . sandbox . open_sandbox_account () print ( sandbox_account . account_id ) account_id = sandbox_account . account_id # add initial 2 000 000 to sandbox account print ( add_money_sandbox ( client = client , account_id = account_id , money = 2000000 )) logger . info ( \"positions: %s \" , client . operations . get_positions ( account_id = account_id ) ) print ( \"money: \" , float ( quotation_to_decimal ( client . operations . get_positions ( account_id = account_id ) . money [ 0 ] ) ), ) logger . info ( \"orders: %s \" , client . orders . get_orders ( account_id = account_id )) logger . info ( \"positions: %s \" , client . operations . get_positions ( account_id = account_id ) ) logger . info ( \"portfolio: %s \" , client . operations . get_portfolio ( account_id = account_id ) ) logger . info ( \"operations: %s \" , client . operations . get_operations ( account_id = account_id , from_ = datetime ( 2023 , 1 , 1 ), to = datetime ( 2023 , 2 , 5 ), ), ) logger . info ( \"withdraw_limits: %s \" , client . operations . get_withdraw_limits ( account_id = account_id ), ) # add + 2 000 000 to sandbox account, total is 4 000 000 print ( add_money_sandbox ( client = client , account_id = account_id , money = 2000000 )) logger . info ( \"positions: %s \" , client . operations . get_positions ( account_id = account_id ) ) # close new sandbox account sandbox_account = client . sandbox . close_sandbox_account ( account_id = sandbox_account . account_id ) print ( sandbox_account ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 / \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0434\u043b\u044f \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u044b. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 / \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u044b."},{"location":"examples/#live-ohlcv","text":"examples/wiseplat_live_strategy_print_ohlcv.py \"\"\" This code is an example of applying Trading Strategy for several Tickers. The strategy in this code is for demonstration only purposes - it outputs OHLCV values. Author: Oleg Shpagin, my github: https://github.com/WISEPLAT \"\"\" import asyncio import logging import os from datetime import timedelta from typing import List , Optional from tinkoff.invest import AioRequestError , AsyncClient , CandleInterval , HistoricCandle from tinkoff.invest.async_services import AsyncServices from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) logger = logging . getLogger ( __name__ ) class LogOnlyCandlesStrategy : \"\"\"This class is responsible for a strategy. You can put here your methods for your strategy.\"\"\" def __init__ ( self , figi : str , timeframe : CandleInterval , days_back : int , check_interval : int , client : Optional [ AsyncServices ], ): self . account_id = None self . figi = figi self . timeframe = timeframe self . days_back = days_back self . check_interval = check_interval self . client = client self . candles : List [ HistoricCandle ] = [] async def get_historical_data ( self ): \"\"\" Gets historical data for the instrument. Returns list of candles. Requests all the candles of timeframe from days_back to now. :return: list of HistoricCandle \"\"\" logger . debug ( \"Start getting historical data for %s days back from now. figi= %s \" , self . days_back , self . figi , ) async for candle in self . client . get_all_candles ( figi = self . figi , from_ = now () - timedelta ( days = self . days_back ), to = now (), interval = self . timeframe , ): if candle not in self . candles : if candle . is_complete : self . candles . append ( candle ) logger . debug ( \"Found %s - figi= %s \" , candle , self . figi ) async def ensure_market_open ( self ): \"\"\" Ensure that the market is open. Loop until the instrument is available. :return: when instrument is available for trading \"\"\" trading_status = await self . client . market_data . get_trading_status ( figi = self . figi ) while not ( trading_status . market_order_available_flag and trading_status . api_trade_available_flag ): logger . debug ( \"Waiting for the market to open. figi= %s \" , self . figi ) await asyncio . sleep ( 60 ) trading_status = await self . client . market_data . get_trading_status ( figi = self . figi ) async def main_cycle ( self ): \"\"\"Main cycle for live strategy.\"\"\" while True : try : await self . ensure_market_open () await self . get_historical_data () # put your strategy code here for live # to generate signals for buying or selling tickers logger . debug ( \"- live mode: run some strategy code to buy or sell - figi= %s \" , self . figi , ) except AioRequestError as are : logger . error ( \"Client error %s \" , are ) await asyncio . sleep ( self . check_interval ) async def start ( self ): \"\"\"Strategy starts from this function.\"\"\" if self . account_id is None : try : self . account_id = ( ( await self . client . users . get_accounts ()) . accounts . pop () . id ) except AioRequestError as are : logger . error ( \"Error taking account id. Stopping strategy. %s \" , are ) return await self . main_cycle () async def run_strategy ( portfolio , timeframe , days_back , check_interval ): \"\"\"From this function we are starting strategy for every ticker from portfolio. \"\"\" async with AsyncClient ( token = TOKEN , app_name = \"TinkoffApp\" ) as client : strategy_tasks = [] for instrument in portfolio : strategy = LogOnlyCandlesStrategy ( figi = instrument , timeframe = timeframe , days_back = days_back , check_interval = check_interval , client = client , ) strategy_tasks . append ( asyncio . create_task ( strategy . start ())) await asyncio . gather ( * strategy_tasks ) if __name__ == \"__main__\" : sber_figi = \"BBG004730N88\" vtbr_figi = \"BBG004730ZJ9\" portfolio = { sber_figi , vtbr_figi } timeframe = CandleInterval . CANDLE_INTERVAL_1_MIN days_back = 1 check_interval = 10 # seconds to check interval for new completed candle loop = asyncio . get_event_loop () task = loop . create_task ( run_strategy ( portfolio = portfolio , timeframe = timeframe , days_back = days_back , check_interval = check_interval , ) ) loop . run_until_complete ( task )","title":"\u041f\u0440\u0438\u043c\u0435\u0440 live \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0434\u043b\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u0438\u043a\u0435\u0440\u043e\u0432. \u0412\u044b\u0432\u043e\u0434 OHLCV \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0439\u0441\u044f \u0441\u0432\u0435\u0447\u0438."},{"location":"robots/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432 \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 tromario/tinkoff-invest-volume-analysis-robot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c \u0440\u044b\u043d\u043a\u0430 - \u0440\u0435\u0430\u043a\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u043d\u044f \u0437\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0437\u0430\u043b\u043e\u0436\u0435\u043d \u0432 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043f\u043f\u0430\u0440\u0430\u0442. \u0420\u0430\u0431\u043e\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430. qwertyo1/tinkoff-trading-bot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f. \u041d\u0435\u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u0440\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u0446\u0435\u043b\u0438. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 sqllite. karpp/investRobot investRobot - \u044d\u0442\u043e \u0440\u043e\u0431\u043e\u0442 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c Tinkoff Invest API. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u0430 \u0442\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u0435 \u0434\u0432\u0443\u0445 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0445. EIDiamond/invest-bot \u0420\u043e\u0431\u043e\u0442 \u0438\u043d\u0442\u0440\u0430\u0434\u0435\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u0431\u0438\u0440\u0436\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e \u0441\u0434\u0435\u043b\u043a\u0430\u0445 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u0432 Telegram \u0447\u0430\u0442.\u0423\u0434\u043e\u0431\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\\\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c. \u0411\u0435\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442\u0430 \u0432\u0441\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0432 \u043b\u043e\u0433 \u0444\u0430\u0439\u043b. \u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 (\"ma200_support_action\"), \u043a\u0443\u0434\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u043b\u044b \u043d\u0430 \u0448\u043e\u0440\u0442 \u0438\u043b\u0438 \u043b\u043e\u043d\u0433 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c. \u0417\u0430\u0442\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u043a\u0446\u0438\u0439, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0448\u043b\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u0441\u0438\u0433\u043d\u0430\u043b\u0430. import logging import os from datetime import timedelta from decimal import Decimal from matplotlib import pyplot as plt from tinkoff.invest import CandleInterval , Client from tinkoff.invest.strategies.base.account_manager import AccountManager from tinkoff.invest.strategies.moving_average.plotter import ( MovingAverageStrategyPlotter , ) from tinkoff.invest.strategies.moving_average.signal_executor import ( MovingAverageSignalExecutor , ) from tinkoff.invest.strategies.moving_average.strategy import MovingAverageStrategy from tinkoff.invest.strategies.moving_average.strategy_settings import ( MovingAverageStrategySettings , ) from tinkoff.invest.strategies.moving_average.strategy_state import ( MovingAverageStrategyState , ) from tinkoff.invest.strategies.moving_average.supervisor import ( MovingAverageStrategySupervisor , ) from tinkoff.invest.strategies.moving_average.trader import MovingAverageStrategyTrader logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] FIGI = os . environ [ \"INVEST_FIGI\" ] ACCOUNT_ID = os . environ [ \"INVEST_ACCOUNT_ID\" ] def main (): with Client ( TOKEN ) as services : settings = MovingAverageStrategySettings ( share_id = FIGI , account_id = ACCOUNT_ID , max_transaction_price = Decimal ( 10000 ), candle_interval = CandleInterval . CANDLE_INTERVAL_1_MIN , long_period = timedelta ( minutes = 100 ), short_period = timedelta ( minutes = 20 ), std_period = timedelta ( minutes = 30 ), ) account_manager = AccountManager ( services = services , strategy_settings = settings ) state = MovingAverageStrategyState () strategy = MovingAverageStrategy ( settings = settings , account_manager = account_manager , state = state , ) signal_executor = MovingAverageSignalExecutor ( services = services , state = state , settings = settings , ) supervisor = MovingAverageStrategySupervisor () trader = MovingAverageStrategyTrader ( strategy = strategy , settings = settings , services = services , state = state , signal_executor = signal_executor , account_manager = account_manager , supervisor = supervisor , ) plotter = MovingAverageStrategyPlotter ( settings = settings ) initial_balance = account_manager . get_current_balance () for i in range ( 5 ): logger . info ( \"Trade %s \" , i ) trader . trade () current_balance = account_manager . get_current_balance () logger . info ( \"Initial balance %s \" , initial_balance ) logger . info ( \"Current balance %s \" , current_balance ) events = supervisor . get_events () plotter . plot ( events ) plt . show ()","title":"\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"robots/#_1","text":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 tromario/tinkoff-invest-volume-analysis-robot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c \u0440\u044b\u043d\u043a\u0430 - \u0440\u0435\u0430\u043a\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u043d\u044f \u0437\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0437\u0430\u043b\u043e\u0436\u0435\u043d \u0432 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043f\u043f\u0430\u0440\u0430\u0442. \u0420\u0430\u0431\u043e\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430. qwertyo1/tinkoff-trading-bot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f. \u041d\u0435\u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u0440\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u0446\u0435\u043b\u0438. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 sqllite. karpp/investRobot investRobot - \u044d\u0442\u043e \u0440\u043e\u0431\u043e\u0442 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c Tinkoff Invest API. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u0430 \u0442\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u0435 \u0434\u0432\u0443\u0445 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0445. EIDiamond/invest-bot \u0420\u043e\u0431\u043e\u0442 \u0438\u043d\u0442\u0440\u0430\u0434\u0435\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u0431\u0438\u0440\u0436\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e \u0441\u0434\u0435\u043b\u043a\u0430\u0445 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u0432 Telegram \u0447\u0430\u0442.\u0423\u0434\u043e\u0431\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\\\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c. \u0411\u0435\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442\u0430 \u0432\u0441\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0432 \u043b\u043e\u0433 \u0444\u0430\u0439\u043b.","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432"},{"location":"robots/#_2","text":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 (\"ma200_support_action\"), \u043a\u0443\u0434\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u043b\u044b \u043d\u0430 \u0448\u043e\u0440\u0442 \u0438\u043b\u0438 \u043b\u043e\u043d\u0433 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c. \u0417\u0430\u0442\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u043a\u0446\u0438\u0439, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0448\u043b\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u0441\u0438\u0433\u043d\u0430\u043b\u0430. import logging import os from datetime import timedelta from decimal import Decimal from matplotlib import pyplot as plt from tinkoff.invest import CandleInterval , Client from tinkoff.invest.strategies.base.account_manager import AccountManager from tinkoff.invest.strategies.moving_average.plotter import ( MovingAverageStrategyPlotter , ) from tinkoff.invest.strategies.moving_average.signal_executor import ( MovingAverageSignalExecutor , ) from tinkoff.invest.strategies.moving_average.strategy import MovingAverageStrategy from tinkoff.invest.strategies.moving_average.strategy_settings import ( MovingAverageStrategySettings , ) from tinkoff.invest.strategies.moving_average.strategy_state import ( MovingAverageStrategyState , ) from tinkoff.invest.strategies.moving_average.supervisor import ( MovingAverageStrategySupervisor , ) from tinkoff.invest.strategies.moving_average.trader import MovingAverageStrategyTrader logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] FIGI = os . environ [ \"INVEST_FIGI\" ] ACCOUNT_ID = os . environ [ \"INVEST_ACCOUNT_ID\" ] def main (): with Client ( TOKEN ) as services : settings = MovingAverageStrategySettings ( share_id = FIGI , account_id = ACCOUNT_ID , max_transaction_price = Decimal ( 10000 ), candle_interval = CandleInterval . CANDLE_INTERVAL_1_MIN , long_period = timedelta ( minutes = 100 ), short_period = timedelta ( minutes = 20 ), std_period = timedelta ( minutes = 30 ), ) account_manager = AccountManager ( services = services , strategy_settings = settings ) state = MovingAverageStrategyState () strategy = MovingAverageStrategy ( settings = settings , account_manager = account_manager , state = state , ) signal_executor = MovingAverageSignalExecutor ( services = services , state = state , settings = settings , ) supervisor = MovingAverageStrategySupervisor () trader = MovingAverageStrategyTrader ( strategy = strategy , settings = settings , services = services , state = state , signal_executor = signal_executor , account_manager = account_manager , supervisor = supervisor , ) plotter = MovingAverageStrategyPlotter ( settings = settings ) initial_balance = account_manager . get_current_balance () for i in range ( 5 ): logger . info ( \"Trade %s \" , i ) trader . trade () current_balance = account_manager . get_current_balance () logger . info ( \"Initial balance %s \" , initial_balance ) logger . info ( \"Current balance %s \" , current_balance ) events = supervisor . get_events () plotter . plot ( events ) plt . show ()","title":"\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438"},{"location":"api/clients/","text":"Clients AsyncClient Async client. import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ()) Client Sync client. import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ())","title":"Clients"},{"location":"api/clients/#clients","text":"","title":"Clients"},{"location":"api/clients/#tinkoff.invest.clients.AsyncClient","text":"Async client. import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"AsyncClient"},{"location":"api/clients/#tinkoff.invest.clients.Client","text":"Sync client. import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ())","title":"Client"}]}